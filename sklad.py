import tkinter as tk
from tkinter import ttk, messagebox
from tkinter.filedialog import asksaveasfilename
import pandas as pd
from fpdf import FPDF
from datetime import datetime

class StorageApp:
    def __init__(self):
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–≤–º–µ—Å—Ç–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
        self.products = [
            {"ID": "001", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": "–ù–æ—É—Ç–±—É–∫ Dell XPS 13", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", 
             "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 15, "–¶–µ–Ω–∞": 68999, "–ú–∏–Ω. –æ—Å—Ç–∞—Ç–æ–∫": 5, "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": "14.05.2025"},
            {"ID": "002", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": "–ú–æ–Ω–∏—Ç–æ—Ä LG 27\"", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", 
             "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 8, "–¶–µ–Ω–∞": 24999, "–ú–∏–Ω. –æ—Å—Ç–∞—Ç–æ–∫": 3, "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": "14.05.2025"},
            {"ID": "003", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ Logitech", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": "–ü–µ—Ä–∏—Ñ–µ—Ä–∏—è", 
             "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 25, "–¶–µ–Ω–∞": 4999, "–ú–∏–Ω. –æ—Å—Ç–∞—Ç–æ–∫": 10, "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": "14.05.2025"}
        ]
        
        self.current_id = 3  # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö ID
        
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
        self.create_login_window()

    def create_login_window(self):
        self.login_root = tk.Tk()
        self.login_root.title("–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º")
        self.login_root.geometry("400x300")
        self.login_root.configure(bg="white")
        
        frame = tk.Frame(self.login_root, bg="white")
        frame.place(relx=0.5, rely=0.5, anchor=tk.CENTER)
        
        # –ò–∫–æ–Ω–∫–∞
        icon_label = tk.Label(frame, text="üì¶", font=("Arial", 36), bg="white")
        icon_label.pack(pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(frame, text="–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n—Å–∫–ª–∞–¥–æ–º", font=("Arial", 16), bg="white")
        title_label.pack(pady=10)
        
        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞
        login_label = tk.Label(frame, text="–õ–æ–≥–∏–Ω", font=("Arial", 12), bg="white")
        login_label.pack(pady=5)
        self.login_entry = tk.Entry(frame, font=("Arial", 12), width=30)
        self.login_entry.pack(pady=5)
        
        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
        password_label = tk.Label(frame, text="–ü–∞—Ä–æ–ª—å", font=("Arial", 12), bg="white")
        password_label.pack(pady=5)
        self.password_entry = tk.Entry(frame, font=("Arial", 12), width=30, show="*")
        self.password_entry.pack(pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏"
        login_button = tk.Button(frame, text="–í–æ–π—Ç–∏", font=("Arial", 14), bg="black", fg="white", 
                               command=self.login)
        login_button.pack(pady=10)
        
        self.login_root.mainloop()

    def login(self):
        username = self.login_entry.get()
        password = self.password_entry.get()
        
        if username == "admin" and password == "password":
            self.login_root.destroy()
            self.create_main_window()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

    def create_main_window(self):
        self.root = tk.Tk()
        self.root.title("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        self.root.geometry("1000x700")
        self.root.configure(bg="#f0f0f0")
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        top_frame = tk.Frame(self.root, bg="#f0f0f0")
        top_frame.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∏
        self.add_button = tk.Button(top_frame, text="+ –î–æ–±–∞–≤–∏—Ç—å", bg="black", fg="white", 
                                  font=("Arial", 12), command=self.open_add_product_window)
        self.add_button.grid(row=0, column=0, padx=5)
        
        self.edit_button = tk.Button(top_frame, text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", bg="gray", fg="white", 
                                   font=("Arial", 12), command=self.edit_product)
        self.edit_button.grid(row=0, column=1, padx=5)
        
        self.delete_button = tk.Button(top_frame, text="‚ùå –£–¥–∞–ª–∏—Ç—å", bg="gray", fg="white", 
                                    font=("Arial", 12), command=self.delete_product)
        self.delete_button.grid(row=0, column=2, padx=5)
        
        self.update_button = tk.Button(top_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", bg="gray", fg="white", 
                                     font=("Arial", 12), command=self.update_table)
        self.update_button.grid(row=0, column=3, padx=5)
        
        self.report_button = tk.Button(top_frame, text="üìã –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç", bg="gray", fg="white", 
                                     font=("Arial", 12), command=self.open_report_window)
        self.report_button.grid(row=0, column=4, padx=5)
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞ –∏ –∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫
        user_avatar = tk.Label(top_frame, text="üë§", font=("Arial", 16), bg="#f0f0f0")
        user_avatar.grid(row=0, column=6, padx=10)
        
        bell_icon = tk.Label(top_frame, text="üîî", font=("Arial", 16), bg="#f0f0f0")
        bell_icon.grid(row=0, column=5, padx=10)
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        table_frame = tk.Frame(self.root, bg="#f0f0f0")
        table_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–º–æ—â—å—é Treeview
        self.columns = ("ID", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¶–µ–Ω–∞", "–ú–∏–Ω. –æ—Å—Ç–∞—Ç–æ–∫")
        self.tree = ttk.Treeview(table_frame, columns=self.columns, show="headings", selectmode="browse")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤
        for col in self.columns:
            self.tree.heading(col, text=col)
            self.tree.column(col, width=150, anchor="center")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–æ—Å—É –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side="right", fill="y")
        self.tree.pack(fill=tk.BOTH, expand=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.update_table()
        
        self.root.mainloop()

    def update_table(self):
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        for product in self.products:
            values = (
                product["ID"],
                product["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"],
                product["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"],
                product["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"],
                f"{product['–¶–µ–Ω–∞']:,} ‚ÇΩ".replace(",", " "),
                product["–ú–∏–Ω. –æ—Å—Ç–∞—Ç–æ–∫"]
            )
            self.tree.insert("", "end", values=values)

    def open_add_product_window(self, product=None):
        self.add_window = tk.Toplevel(self.root)
        self.add_window.title("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞" if not product else "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞")
        self.add_window.geometry("400x400")
        self.add_window.configure(bg="white")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_text = "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç" if not product else "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç"
        title_label = tk.Label(self.add_window, text=title_text, font=("Arial", 16), bg="white")
        title_label.pack(pady=10)
        
        # –ü–æ–ª–µ –¥–ª—è –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        name_label = tk.Label(self.add_window, text="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", font=("Arial", 12), bg="white")
        name_label.pack(pady=5)
        self.name_entry = tk.Entry(self.add_window, font=("Arial", 12), width=30)
        self.name_entry.pack(pady=5)
        
        # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_label = tk.Label(self.add_window, text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", font=("Arial", 12), bg="white")
        category_label.pack(pady=5)
        categories = ["–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "–ü–µ—Ä–∏—Ñ–µ—Ä–∏—è", "–û—Ñ–∏—Å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞", "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã"]
        self.category_combobox = ttk.Combobox(self.add_window, values=categories, font=("Arial", 12), width=27)
        self.category_combobox.set("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
        self.category_combobox.pack(pady=5)
        
        # –ü–æ–ª–µ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        quantity_label = tk.Label(self.add_window, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", font=("Arial", 12), bg="white")
        quantity_label.pack(pady=5)
        self.quantity_entry = tk.Entry(self.add_window, font=("Arial", 12), width=30)
        self.quantity_entry.pack(pady=5)
        
        # –ü–æ–ª–µ –¥–ª—è —Ü–µ–Ω—ã
        price_label = tk.Label(self.add_window, text="–¶–µ–Ω–∞", font=("Arial", 12), bg="white")
        price_label.pack(pady=5)
        self.price_entry = tk.Entry(self.add_window, font=("Arial", 12), width=30)
        self.price_entry.pack(pady=5)
        
        # –ü–æ–ª–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞
        min_stock_label = tk.Label(self.add_window, text="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫", font=("Arial", 12), bg="white")
        min_stock_label.pack(pady=5)
        self.min_stock_entry = tk.Entry(self.add_window, font=("Arial", 12), width=30)
        self.min_stock_entry.pack(pady=5)
        
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º, –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
        if product:
            self.name_entry.insert(0, product["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"])
            self.category_combobox.set(product["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"])
            self.quantity_entry.insert(0, str(product["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]))
            self.price_entry.insert(0, str(product["–¶–µ–Ω–∞"]))
            self.min_stock_entry.insert(0, str(product["–ú–∏–Ω. –æ—Å—Ç–∞—Ç–æ–∫"]))
            self.editing_id = product["ID"]
        else:
            self.editing_id = None
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = tk.Frame(self.add_window, bg="white")
        button_frame.pack(pady=10)
        
        save_text = "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å" if not product else "üíæ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"
        save_button = tk.Button(button_frame, text=save_text, font=("Arial", 12), bg="black", fg="white", 
                              command=lambda: self.save_product(product is not None))
        save_button.grid(row=0, column=0, padx=5)
        
        cancel_button = tk.Button(button_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", font=("Arial", 12), bg="gray", fg="white", 
                                command=self.add_window.destroy)
        cancel_button.grid(row=0, column=1, padx=5)

    def save_product(self, is_edit=False):
        try:
            name = self.name_entry.get()
            category = self.category_combobox.get()
            quantity = int(self.quantity_entry.get())
            price = float(self.price_entry.get())
            min_stock = int(self.min_stock_entry.get())
            
            if not all([name, category]):
                raise ValueError("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
            
            if quantity < 0 or price < 0 or min_stock < 0:
                raise ValueError("–ó–Ω–∞—á–µ–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏")
            
            current_date = datetime.now().strftime("%d.%m.%Y")
            
            if is_edit:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–¥—É–∫—Ç
                for product in self.products:
                    if product["ID"] == self.editing_id:
                        product.update({
                            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": name,
                            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": category,
                            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": quantity,
                            "–¶–µ–Ω–∞": price,
                            "–ú–∏–Ω. –æ—Å—Ç–∞—Ç–æ–∫": min_stock,
                            "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": current_date
                        })
                        break
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
                self.current_id += 1
                new_id = f"{self.current_id:03d}"
                self.products.append({
                    "ID": new_id,
                    "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": name,
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": category,
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": quantity,
                    "–¶–µ–Ω–∞": price,
                    "–ú–∏–Ω. –æ—Å—Ç–∞—Ç–æ–∫": min_stock,
                    "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": current_date
                })
            
            self.update_table()
            self.add_window.destroy()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            
        except ValueError as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {str(e)}")

    def edit_product(self):
        selected_item = self.tree.selection()
        if not selected_item:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        item = self.tree.item(selected_item[0])
        product_id = item['values'][0]
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥—É–∫—Ç –≤ —Å–ø–∏—Å–∫–µ
        product_to_edit = None
        for product in self.products:
            if product["ID"] == product_id:
                product_to_edit = product
                break
        
        if product_to_edit:
            self.open_add_product_window(product_to_edit)

    def delete_product(self):
        selected_item = self.tree.selection()
        if not selected_item:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç?"):
            item = self.tree.item(selected_item[0])
            product_id = item['values'][0]
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
            self.products = [p for p in self.products if p["ID"] != product_id]
            self.update_table()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")

    def open_report_window(self):
        self.report_window = tk.Toplevel(self.root)
        self.report_window.title("–û—Ç—á–µ—Ç—ã –ø–æ —Ç–æ–≤–∞—Ä–∞–º")
        self.report_window.geometry("900x700")
        self.report_window.configure(bg="#f0f0f0")
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        filter_frame = tk.Frame(self.report_window, bg="#f0f0f0")
        filter_frame.pack(pady=10)
        
        # –§–∏–ª—å—Ç—Ä: –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        threshold_label = tk.Label(filter_frame, text="–ü–æ—Ä–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", font=("Arial", 12), bg="#f0f0f0")
        threshold_label.grid(row=0, column=0, padx=5, pady=5)
        self.threshold_entry = tk.Entry(filter_frame, font=("Arial", 12), width=15)
        self.threshold_entry.grid(row=0, column=1, padx=5, pady=5)
        
        # –§–∏–ª—å—Ç—Ä: –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        category_label = tk.Label(filter_frame, text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", font=("Arial", 12), bg="#f0f0f0")
        category_label.grid(row=0, column=2, padx=5, pady=5)
        categories = ["–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "–ü–µ—Ä–∏—Ñ–µ—Ä–∏—è", "–û—Ñ–∏—Å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞", "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã"]
        self.report_category_combobox = ttk.Combobox(filter_frame, values=categories, font=("Arial", 12), width=15)
        self.report_category_combobox.set("–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        self.report_category_combobox.grid(row=0, column=3, padx=5, pady=5)
        
        # –§–∏–ª—å—Ç—Ä: –°—Ç–∞—Ç—É—Å
        status_label = tk.Label(filter_frame, text="–°—Ç–∞—Ç—É—Å", font=("Arial", 12), bg="#f0f0f0")
        status_label.grid(row=0, column=4, padx=5, pady=5)
        statuses = ["–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã", "–ù–∏–∂–µ –ø–æ—Ä–æ–≥–∞", "–í –Ω–∞–ª–∏—á–∏–∏", "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"]
        self.status_combobox = ttk.Combobox(filter_frame, values=statuses, font=("Arial", 12), width=15)
        self.status_combobox.set("–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã")
        self.status_combobox.grid(row=0, column=5, padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
        apply_button = tk.Button(filter_frame, text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å", font=("Arial", 12), bg="black", fg="white", 
                               command=self.apply_filters)
        apply_button.grid(row=0, column=6, padx=5, pady=5)
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        table_frame = tk.Frame(self.report_window, bg="#f0f0f0")
        table_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–º–æ—â—å—é Treeview
        report_columns = ("–¢–æ–≤–∞—Ä", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–°—Ç–∞—Ç—É—Å", "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
        self.report_tree = ttk.Treeview(table_frame, columns=report_columns, show="headings")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤
        for col in report_columns:
            self.report_tree.heading(col, text=col)
            self.report_tree.column(col, width=150, anchor="center")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–æ—Å—É –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.report_tree.yview)
        self.report_tree.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side="right", fill="y")
        self.report_tree.pack(fill=tk.BOTH, expand=True)
        
        # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_frame = tk.Frame(self.report_window, bg="#f0f0f0")
        export_frame.pack(pady=10)
        
        excel_button = tk.Button(export_frame, text="üíæ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", bg="black", fg="white", 
                               font=("Arial", 12), command=self.export_to_excel)
        excel_button.pack(side="left", padx=5)
        
        pdf_button = tk.Button(export_frame, text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF", bg="black", fg="white", 
                             font=("Arial", 12), command=self.export_to_pdf)
        pdf_button.pack(side="left", padx=5)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
        self.apply_filters()

    def apply_filters(self):
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.report_tree.get_children():
            self.report_tree.delete(item)
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        threshold = self.threshold_entry.get()
        category = self.report_category_combobox.get()
        status = self.status_combobox.get()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        filtered_data = []
        for product in self.products:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞
            if product["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] <= 0:
                product_status = "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
            elif product["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] < product["–ú–∏–Ω. –æ—Å—Ç–∞—Ç–æ–∫"]:
                product_status = "–ù–∏–∂–µ –ø–æ—Ä–æ–≥–∞"
            else:
                product_status = "–í –Ω–∞–ª–∏—á–∏–∏"
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            include = True
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ—Ä–æ–≥–æ–≤–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
            if threshold:
                try:
                    if product["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] > int(threshold):
                        include = False
                except ValueError:
                    pass
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category != "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" and product["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] != category:
                include = False
                
            # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
            if status != "–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã" and product_status != status:
                include = False
                
            if include:
                filtered_data.append({
                    "–¢–æ–≤–∞—Ä": product["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"],
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": product["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"],
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": product["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"],
                    "–°—Ç–∞—Ç—É—Å": product_status,
                    "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": product["–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"]
                })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
        for item in filtered_data:
            self.report_tree.insert("", "end", values=(
                item["–¢–æ–≤–∞—Ä"],
                item["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"],
                item["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"],
                item["–°—Ç–∞—Ç—É—Å"],
                item["–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"]
            ))

    def export_to_excel(self):
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—á–µ—Ç–∞
        data = []
        for item in self.report_tree.get_children():
            values = self.report_tree.item(item)['values']
            data.append({
                "–¢–æ–≤–∞—Ä": values[0],
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": values[1],
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": values[2],
                "–°—Ç–∞—Ç—É—Å": values[3],
                "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": values[4]
            })
        
        if not data:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(data)
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        file_path = asksaveasfilename(
            defaultextension=".xlsx",
            filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")],
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –∫–∞–∫"
        )
        
        if file_path:
            try:
                df.to_excel(file_path, index=False)
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {file_path}")
            except Exception as e:
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(data)
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        file_path = asksaveasfilename(
            defaultextension=".xlsx",
            filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")],
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –∫–∞–∫"
        )
        
        if file_path:
            try:
                df.to_excel(file_path, index=False)
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {file_path}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ: {str(e)}")

    def export_to_pdf(self):
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—á–µ—Ç–∞
        data = []
        for item in self.report_tree.get_children():
            values = self.report_tree.item(item)['values']
            data.append(values)
        
        if not data:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        file_path = asksaveasfilename(
            defaultextension=".pdf",
            filetypes=[("PDF files", "*.pdf"), ("All files", "*.*")],
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –∫–∞–∫"
        )
        
        if file_path:
            try:
                pdf = FPDF()
                pdf.add_page()
                pdf.set_font("Arial", size=12)
                
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
                pdf.cell(200, 10, txt="–û—Ç—á–µ—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞–º –Ω–∞ —Å–∫–ª–∞–¥–µ", ln=True, align='C')
                pdf.ln(10)
                
                # –î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
                pdf.set_font("Arial", size=10)
                pdf.cell(200, 10, txt=f"–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}", ln=True)
                pdf.ln(10)
                
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
                pdf.set_font("Arial", size=10, style='B')
                col_widths = [60, 40, 30, 40, 40]
                headers = ["–¢–æ–≤–∞—Ä", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–°—Ç–∞—Ç—É—Å", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ"]
                
                for i, header in enumerate(headers):
                    pdf.cell(col_widths[i], 10, txt=header, border=1)
                pdf.ln()
                
                # –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
                pdf.set_font("Arial", size=10)
                for row in data:
                    for i, item in enumerate(row):
                        pdf.cell(col_widths[i], 10, txt=str(item), border=1)
                    pdf.ln()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF
                pdf.output(file_path)
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {file_path}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ: {str(e)}")

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    app = StorageApp()